{"version":3,"sources":["api/api.js","App.js","index.js"],"names":["instance","axios","baseURL","quotesAPI","get","then","response","data","all","Title","Typography","columns","title","dataIndex","width","key","render","tag","color","upvotes","HeartTwoTone","sorter","a","b","App","useState","quotes","setQuotes","table","useEffect","fetchedQuotes","nameQuotes","length","map","quote","name","user","first","last","fetchData","arr","obj","tr","Object","values","value","push","_id","generateTable","dataSource","tip","message","type","ReactDOM","StrictMode","document","getElementById"],"mappings":"oRAEMA,E,OAAWC,OAAa,CAC1BC,QAAQ,6EAGCC,EAAY,WAEjB,OAAOH,EAASI,MAAMC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,Q,6CCCrDC,G,cAAUC,EAAVD,OACFE,EAAU,CACd,CACEC,MAAO,OACPC,UAAW,OACXC,MAAM,QACNC,IAAK,QAEP,CACEH,MAAO,SACPC,UAAW,OACXE,IAAK,QAEP,CACEH,MAAO,WACPC,UAAW,OACXE,IAAK,OACLC,OAAQ,SAACC,GAAD,OACN,8BACE,kBAAC,IAAD,CAAKC,MAAM,OAAOH,IAAKE,GACpBA,MAKT,CACEL,MAAO,QACPC,UAAW,UACXE,IAAK,UACLC,OAAQ,SAACG,GAAD,OACN,8BACE,kBAACC,EAAA,EAAD,MADF,IACoBD,IAGtBE,OAAO,SAACC,EAAEC,GAAH,OAAQD,EAAEH,QAAQI,EAAEJ,WA+ChBK,MA3Cf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,KAETC,EAAQ,GAwBZ,OAtBAC,qBAAU,WAAM,4CACd,8BAAAP,EAAA,sEAC4BnB,IAD5B,OACM2B,EADN,OAEMC,EAAaD,EAAcE,OAC3BF,EAAcG,KAAI,SAACC,GAAD,sBAAiBA,EAAjB,CAAwBC,KAAMD,EAAME,KAAN,UAAgBF,EAAME,KAAKD,KAAKE,MAAhC,YAAyCH,EAAME,KAAKD,KAAKG,MAAS,cAClH,GACJX,EAAUI,GALZ,4CADc,uBAAC,WAAD,wBAQdQ,KACC,IAEmB,SAACC,GACrB,GAAIA,EAAIR,OAAQ,CAAC,IAAD,gBACEQ,GADF,IACd,2BAAqB,CAAC,IAAbC,EAAY,QACfC,EAAKC,OAAOC,OAAOH,GAAKR,KAAI,SAACY,GAAD,OAAW,4BAAsB,kBAAVA,EAAqBA,EAAQ,mBACpFjB,EAAMkB,KAAK,wBAAI/B,IAAK0B,EAAIM,KAAML,KAHlB,gCAQlBM,CAActB,GAGZ,6BACE,gCACE,kBAACjB,EAAD,qBAEAiB,EAAOM,OAKP,kBAAC,IAAD,CAAOiB,WAAYvB,EAAQf,QAASA,IAJpC,kBAAC,IAAD,CAAMuC,IAAI,cACR,kBAAC,IAAD,CAAOC,QAAQ,4DAA4DC,KAAK,UAKpF,kCChFNC,IAASrC,OACP,kBAAC,IAAMsC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.8e1bea0d.chunk.js","sourcesContent":["import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL:'https://cors-anywhere.herokuapp.com/https://cat-fact.herokuapp.com/facts'\r\n})\r\n\r\nexport const quotesAPI = {\r\n    getQuotes(){\r\n        return instance.get().then(response => response.data.all)\r\n    }\r\n}","import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n// import { Table } from \"antd\";\nimport { quotesAPI } from \"./api/api\";\nimport { Table, Tag, Spin, Alert } from \"antd\";\nimport { HeartTwoTone } from \"@ant-design/icons\";\nimport \"antd/dist/antd.css\";\nimport { Typography } from 'antd';\n\nconst { Title } = Typography;\nconst columns = [\n  {\n    title: \"Text\",\n    dataIndex: \"text\",\n    width:'600px',\n    key: \"text\",\n  },\n  {\n    title: \"Author\",\n    dataIndex: \"name\",\n    key: \"name\",\n  },\n  {\n    title: \"CATegory\",\n    dataIndex: \"type\",\n    key: \"tags\",\n    render: (tag) => (\n      <span>\n        <Tag color=\"blue\" key={tag}>\n          {tag}\n        </Tag>\n      </span>\n    ),\n  },\n  {\n    title: \"Likes\",\n    dataIndex: \"upvotes\",\n    key: \"upvotes\",\n    render: (upvotes) => (\n      <span>\n        <HeartTwoTone /> {upvotes}\n      </span>\n    ),\n    sorter:(a,b)=> a.upvotes-b.upvotes\n  },\n];\n\nfunction App() {\n  const [quotes, setQuotes] = useState([]);\n  let table = [];\n\n  useEffect(() => {\n    async function fetchData() {\n      let fetchedQuotes = await quotesAPI.getQuotes();\n      let nameQuotes = fetchedQuotes.length\n        ? fetchedQuotes.map((quote) => ({ ...quote, name: quote.user ? `${quote.user.name.first} ${quote.user.name.last}` : 'noname'}))\n        : [];\n      setQuotes(nameQuotes);\n    }\n    fetchData();\n  }, []);\n\n  const generateTable = (arr) => {\n    if (arr.length) {\n      for (let obj of arr) {\n        let tr = Object.values(obj).map((value) => <td>{typeof value !== \"object\" ? value : \"object value\"}</td>);\n        table.push(<tr key={obj._id}>{tr}</tr>);\n      }\n    }\n  };\n\n  generateTable(quotes);\n\n  return (\n    <div>\n      <header>\n        <Title>pussyQuotes</Title>\n      </header>\n      {!quotes.length ? (\n        <Spin tip=\"Loading...\">\n          <Alert message=\"Please, wait! Getting universe's best thoughts about cats\" type=\"info\" />\n        </Spin>\n      ) : (\n        <Table dataSource={quotes} columns={columns} />\n      )}\n      <table>{/* <tbody>{table}</tbody> */}</table>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}